// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// inv2
arma::mat inv2(arma::mat a);
RcppExport SEXP LNAPhyloDyn_inv2(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(inv2(a));
    return rcpp_result_gen;
END_RCPP
}
// chols
arma::mat chols(arma::mat S);
RcppExport SEXP LNAPhyloDyn_chols(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(chols(S));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(int n, arma::mat sigma);
RcppExport SEXP LNAPhyloDyn_mvrnormArma(SEXP nSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, sigma));
    return rcpp_result_gen;
END_RCPP
}
// expM
arma::mat expM(arma::mat A);
RcppExport SEXP LNAPhyloDyn_expM(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(expM(A));
    return rcpp_result_gen;
END_RCPP
}
// LogTraj
arma::mat LogTraj(arma::mat Traj);
RcppExport SEXP LNAPhyloDyn_LogTraj(SEXP TrajSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Traj(TrajSEXP);
    rcpp_result_gen = Rcpp::wrap(LogTraj(Traj));
    return rcpp_result_gen;
END_RCPP
}
// SIR_ODE2
arma::vec SIR_ODE2(double X, double Y, double theta1, double theta2);
RcppExport SEXP LNAPhyloDyn_SIR_ODE2(SEXP XSEXP, SEXP YSEXP, SEXP theta1SEXP, SEXP theta2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< double >::type theta2(theta2SEXP);
    rcpp_result_gen = Rcpp::wrap(SIR_ODE2(X, Y, theta1, theta2));
    return rcpp_result_gen;
END_RCPP
}
// log_like_traj
double log_like_traj(arma::mat SdeTraj, arma::mat OdeTraj, List Filter, int gridsize, double t_correct);
RcppExport SEXP LNAPhyloDyn_log_like_traj(SEXP SdeTrajSEXP, SEXP OdeTrajSEXP, SEXP FilterSEXP, SEXP gridsizeSEXP, SEXP t_correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type SdeTraj(SdeTrajSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< List >::type Filter(FilterSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    rcpp_result_gen = Rcpp::wrap(log_like_traj(SdeTraj, OdeTraj, Filter, gridsize, t_correct));
    return rcpp_result_gen;
END_RCPP
}
// SIR_log_KOM_Filter2
List SIR_log_KOM_Filter2(arma::mat OdeTraj, double theta1, double theta2, int gridsize);
RcppExport SEXP LNAPhyloDyn_SIR_log_KOM_Filter2(SEXP OdeTrajSEXP, SEXP theta1SEXP, SEXP theta2SEXP, SEXP gridsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< double >::type theta2(theta2SEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(SIR_log_KOM_Filter2(OdeTraj, theta1, theta2, gridsize));
    return rcpp_result_gen;
END_RCPP
}
// SIR_ODE
arma::vec SIR_ODE(double X, double Y, double theta1, double theta2);
RcppExport SEXP LNAPhyloDyn_SIR_ODE(SEXP XSEXP, SEXP YSEXP, SEXP theta1SEXP, SEXP theta2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< double >::type theta2(theta2SEXP);
    rcpp_result_gen = Rcpp::wrap(SIR_ODE(X, Y, theta1, theta2));
    return rcpp_result_gen;
END_RCPP
}
// ODE
arma::mat ODE(arma::vec initial, arma::vec t, arma::vec param);
RcppExport SEXP LNAPhyloDyn_ODE(SEXP initialSEXP, SEXP tSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(ODE(initial, t, param));
    return rcpp_result_gen;
END_RCPP
}
// Traj_sim
List Traj_sim(arma::vec initial, arma::mat OdeTraj, List Filter, double t_correct);
RcppExport SEXP LNAPhyloDyn_Traj_sim(SEXP initialSEXP, SEXP OdeTrajSEXP, SEXP FilterSEXP, SEXP t_correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< List >::type Filter(FilterSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    rcpp_result_gen = Rcpp::wrap(Traj_sim(initial, OdeTraj, Filter, t_correct));
    return rcpp_result_gen;
END_RCPP
}
// Traj_sim_ez
List Traj_sim_ez(arma::vec initial, arma::vec times, double theta1, double theta2, int gridsize, double t_correct);
RcppExport SEXP LNAPhyloDyn_Traj_sim_ez(SEXP initialSEXP, SEXP timesSEXP, SEXP theta1SEXP, SEXP theta2SEXP, SEXP gridsizeSEXP, SEXP t_correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< double >::type theta2(theta2SEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    rcpp_result_gen = Rcpp::wrap(Traj_sim_ez(initial, times, theta1, theta2, gridsize, t_correct));
    return rcpp_result_gen;
END_RCPP
}
// log_like_traj2
double log_like_traj2(arma::mat SdeTraj, arma::vec times, arma::vec state, double theta1, double theta2, int gridsize, double t_correct);
RcppExport SEXP LNAPhyloDyn_log_like_traj2(SEXP SdeTrajSEXP, SEXP timesSEXP, SEXP stateSEXP, SEXP theta1SEXP, SEXP theta2SEXP, SEXP gridsizeSEXP, SEXP t_correctSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type SdeTraj(SdeTrajSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type state(stateSEXP);
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< double >::type theta2(theta2SEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    rcpp_result_gen = Rcpp::wrap(log_like_traj2(SdeTraj, times, state, theta1, theta2, gridsize, t_correct));
    return rcpp_result_gen;
END_RCPP
}
// coal_loglik
double coal_loglik(List init, arma::mat f1, double t_correct, double lambda, int gridsize);
RcppExport SEXP LNAPhyloDyn_coal_loglik(SEXP initSEXP, SEXP f1SEXP, SEXP t_correctSEXP, SEXP lambdaSEXP, SEXP gridsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type f1(f1SEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(coal_loglik(init, f1, t_correct, lambda, gridsize));
    return rcpp_result_gen;
END_RCPP
}
// coal_loglik_step
double coal_loglik_step(List init, arma::mat f1, double t_correct, double lambda, int gridsize);
RcppExport SEXP LNAPhyloDyn_coal_loglik_step(SEXP initSEXP, SEXP f1SEXP, SEXP t_correctSEXP, SEXP lambdaSEXP, SEXP gridsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type f1(f1SEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(coal_loglik_step(init, f1, t_correct, lambda, gridsize));
    return rcpp_result_gen;
END_RCPP
}
// ESlice
arma::mat ESlice(arma::mat f_cur, arma::mat OdeTraj, List FTs, arma::vec state, List init, double t_correct, double lambda, int reps, int gridsize);
RcppExport SEXP LNAPhyloDyn_ESlice(SEXP f_curSEXP, SEXP OdeTrajSEXP, SEXP FTsSEXP, SEXP stateSEXP, SEXP initSEXP, SEXP t_correctSEXP, SEXP lambdaSEXP, SEXP repsSEXP, SEXP gridsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type f_cur(f_curSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type OdeTraj(OdeTrajSEXP);
    Rcpp::traits::input_parameter< List >::type FTs(FTsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type state(stateSEXP);
    Rcpp::traits::input_parameter< List >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type t_correct(t_correctSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< int >::type gridsize(gridsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ESlice(f_cur, OdeTraj, FTs, state, init, t_correct, lambda, reps, gridsize));
    return rcpp_result_gen;
END_RCPP
}
